
# Schema GraphQL complet pour FleetWatcher

type Company @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    id: ID! @primaryKey,
    name: String
    siret: String
    address: String
    postalCode: String
    city: String
    countryCode: String
    contact: String
    email: String
    mobile: String
    phone: String
    fax: String
    creationDate: String
    subscriptionDate: String
    keyedStart: Boolean
    # Relationships
    users: [User] @hasMany (indexName: "usersByCompany", fields: ["id"])
    vehicles: [Vehicle] @hasMany (indexName: "vehiclesByCompany", fields: ["id"])
    zones: [Zone] @hasMany (indexName: "zonesByCompany", fields: ["id"])
    pois: [Poi] @hasMany (indexName: "poisByCompany", fields: ["id"])
    drivers: [Driver] @hasMany (indexName: "driversByCompany", fields: ["id"])
    trames: [Trame] @hasMany (indexName: "tramesByCompany", fields: ["id"])
    maintenances: [Maintenance] @hasMany(indexName: "maintenancesByCompany", fields: ["id"])
    depenses: [Depense] @hasMany(indexName: "depensesByCompany", fields: ["id"])
}

type User @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    sub: String! @primaryKey
    firstname: String
    lastname: String
    address: String
    mobile: String
    username: String
    password: String
    #invited: String // Role invité
    beginDate: String
    endDate: String
    mappingId: String
    languageCode: String
    lastModificationDate: String
    showReport: String
    dispatcher: String
    applicationVersion: String
    themeId: String
    picture: S3Object
    role: UserRole @index(name: "usersByRole")
    accessExpiresAt: AWSDateTime
    accessType: AccessType
     accessibleVehicles: [String!] # Liste des immatriculations autorisées
    # Relationships
    companyUsersId: ID! @index(name: "usersByCompany")
    company: Company! @belongsTo (fields: ["companyUsersId"])
}

type Driver @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    sub: String! @primaryKey
    firstname: String
    lastname: String
    password: String
    username: String
    fullname: String
    birthDate: String
    drivingLicenseNumber: String
    drivingLicenseType: String
    job: String
    hiringDate: String
    comment: String
    driverKey: String @index(name: "driverByKey")
    email: String
    mobile: String
    lastModificationDate: String
    code: String
    address: String
    agencyId: String
    cdc: String
    pdm: String
    nni: String
    # Relationships
    companyDriversId: ID! @index(name: "driversByCompany")
    company: Company! @belongsTo (fields: ["companyDriversId"])
}

type Vehicle @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    immat: String! @primaryKey
    code_certificat_qualite_air: String
          ad_blue: String
          AWN_genre: String
          emissions: String
          AWN_nom_commercial: String
          AWN_numero_de_serie: String
          AWN_niveau_de_bruit_au_ralenti: String
          AWN_consommation_ex_urbaine: String
          AWN_consommation_urbaine: String
          AWN_max_speed: String
          AWN_emission_co_2_prf: String
          AWN_depollution: String
          AWN_nbr_soupapes: String
          AWN_nbr_vitesses: String
          AWN_nbr_portes: String
          AWN_nbr_places: String
          AWN_propulsion: String
          AWN_date_30: String
          AWN_date_cg: String
          AWN_collection: String
          AWN_segment: String
          AWN_type_frein: String
          AWN_group: String
          AWN_VIN: String
          AWN_k_type: String
          AWN_version: String
          AWN_label: String
           AWN_code_moteur: String
           AWN_nbr_cylindre_energie:String
                    AWN_nbr_cylindres:String
  AWN_energie_code: String
  AWN_mode_injection: String
  AWN_type_injection: String
  AWN_turbo_compressor: String
  AWN_vitesse_moteur: String
          AWN_generation: String
          AWN_poids_total: String
          AWN_poids_vide: String
          AWN_poids_total_roulant: String
          AWN_consommation_mixte: String
          ad_green: String
          AWN_poids_max_autorise: String
          depollution: String
          cl_environ_prf: String
          AWN_model:String
          AWN_model_image: String
          dateMiseEnCirculation: String
          puissanceFiscale: String
          puissanceDin: String
           energie: String
           AWN_puissance_KW: String
          boiteVitesse: String
          couleur: String
          carrosserie: String
          marque: String
          marque_id: String
          modele_id: String
          version: String
          immatriculation: String
          VIN:String
          k_type: String
          type_mine:String
          AWN_url_image:String
    year: String
    fuelType: String
    consumption: String
    maxSpeed: String
    seatCount: String
    icon: String
    picture: S3Object
    kilometerage: String
    kilometerPrice: String
    kilometerageStart: String
    kilometerageDay: String
    kilometerageLastUpdate: String
    timeRunning: String
    counterValue: String
    co2: String
    lastModificationDate: String
    rollingTimeStart: String
    rollingTimeDay: String
    locations: String
    installationPrecautions: String
    code: String
    nomVehicule: String
    vehicleCategory: VehicleCategory @hasOne
    brand: VehicleBrand @hasOne
    modele: VehicleModel @hasOne
    gefcoSend: String
    tankCapacity: String
    canMileage: String
    # Relationships
    companyVehiclesId: ID! @index(name: "vehiclesByCompany")
    company: Company! @belongsTo (fields: ["companyVehiclesId"])
    device: Device @hasOne
    alerts: [VehicleAlerts] @hasMany(indexName: "byVehicle", fields: ["immat"])
    tags: [Tag] @manyToMany(relationName: "VehicleTags")
    maintenances: [Maintenance] @hasMany(indexName: "maintenancesByVehicle", fields: ["immat"])
    depenses: [Depense] @hasMany(indexName: "byVehicle", fields: ["immat"])
}

type Alert @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID! @primaryKey
  name: String
  type: AlertType!
  typeLabel: String
  disabled: Boolean
  instantaneous: Boolean
  reportFrequency: AlertFrequency
  byMail: Boolean
  bySms: Boolean
  byWhatsapp: Boolean
  smsTemplate: String
  emailTemplate: String
  sentToDriver: Boolean!
  phones: [String]
  emails: [String]
  company: Company! @hasOne
  vehicles: [VehicleAlerts] @hasMany(indexName: "byAlert", fields: ["id"])
  extra: AWSJSON
  zone: Zone @hasOne
}

type VehicleAlerts @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID! @primaryKey
  vehicleImmat: String! @index(name: "byVehicle")
  vehicle: Vehicle! @belongsTo(fields:["vehicleImmat"])
  alertId: ID! @index(name: "byAlert")
  alert: Alert! @belongsTo(fields:["alertId"])
  isFlespi: Boolean
}

type AlertDefinition @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  key: AlertType! @primaryKey
  label: String!
  description: String!
  isFlespi: Boolean!
  calculator: Int
  variables: [String]
}

type VehicleAlertState @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: String! @primaryKey
  alert: AlertType!
  state: String
  timestamp: AWSTimestamp!
  zone: Zone @hasOne
  vehicle: Vehicle! @hasOne
}

type AlertHistory @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID! @primaryKey
  type: AlertType!
  imei: String!
  vehicle: Vehicle! @hasOne
  driver: Driver @hasOne
  company: Company! @hasOne
  timestamp: AWSTimestamp!
  config: Alert! @hasOne
  data: AWSJSON!
}

type Zone @model
@auth(
  rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID!,
  name: String!
  adress: String
  lat: Float!
  lng: Float!
  radius: Int
  companyZonesId: ID! @index(name: "zonesByCompany")
  company: Company! @belongsTo (fields: ["companyZonesId"])
}

type Poi @model
@auth(
  rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID!,
  name: String!
  adress: String
  lat: Float!
  lng: Float!
  companyPoisId: ID! @index(name: "poisByCompany")
  company: Company! @belongsTo (fields: ["companyPoisId"])
}

type VehicleCategory @model
@auth(
    rules: [
        { allow: groups, groups: [ "admin" ] }
    ]
){
    id: ID! @primaryKey
    category: String!
    description: String
}

type VehicleBrand @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    brandName: String! @primaryKey
    logo: S3Object
    models: [VehicleModel] @hasMany
}

type VehicleModel @model
@auth(
    rules: [
        { allow: private, provider: iam, operations: [ read ] },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    id: ID! @primaryKey
    modele: String
    brand: VehicleBrand! @belongsTo
}

type Device @model
@auth(
    rules: [
        { allow: groups, groups: [ "admin" ] }
    ]
){
    imei: String! @primaryKey
    protocolId: Int
    sim: String
    messages_ttl: String
    device_type_id: Int
    flespi_id: Int
    enabled: Boolean
    media_ttl: String
    name: String
    cid: String
    media_rotate: String
    messages_rotate: String
    # Relationships
    vehicle: Vehicle @belongsTo
}

type Trame @model
@auth(
    rules: [
        { allow: public, operations: [read] },
        { allow: private, provider: iam, operations: [ create, update ]  },
        { allow: groups, groups: [ "admin" ] }
    ]
){
    id: String! @primaryKey
    speed: Float
    lat: Float
    lng: Float
    distance: Float
    address: String
    azimut: Float
    immobilisation: Boolean
    timestamp: AWSDateTime
    state: String
    fuel: String
    ibuttonCode: String
    # Filter
    companyId: String
    driverFullName: String
    vehicleBrandName: String
    # Relationships
    companyTramesId: ID @index(name: "tramesByCompany")
    company: Company @belongsTo (fields: ["companyTramesId"])
    driver: Driver @hasOne
    vehicle: Vehicle @hasOne
    # Technical
    processor: Processor
}

type DvD @model
@auth(
    rules: [
        { allow: groups, groups: [ "admin" ] }
    ]
){
  id: ID! @primaryKey
  dvDVehicleImmat: String! @index(name: "dvdByVehicleImmat")
  vehicle: Vehicle! @hasOne (fields: ["dvDVehicleImmat"])
  dvDDriverSub: String! @index(name: "dvdByDriverSub")
  driver: Driver! @hasOne (fields: ["dvDDriverSub"])
  company: Company! @hasOne
  assignmentDate: AWSDateTime!
  unassignmentDate: AWSDateTime
}

type Maintenance @model
@auth(
  rules: [
    { allow: private, provider: iam, operations: [ read ] },
    { allow: groups, groups: [ "admin" ] }
  ]
) {
  id: ID! @primaryKey
  operationType: MaintenanceOperationType!
  status: MaintenanceStatus!
  reminderDays: Int!
  alertDate: AWSDateTime!
  cost: Float
  email: String
  notes: String
  creationDate: AWSDateTime!
  lastModificationDate: AWSDateTime
  # Relationships
  companyMaintenancesId: ID! @index(name: "maintenancesByCompany")
  company: Company! @belongsTo(fields: ["companyMaintenancesId"])
  vehicleMaintenancesImmat: String! @index(name: "maintenancesByVehicle")
  vehicle: Vehicle! @belongsTo(fields: ["vehicleMaintenancesImmat"])
}

type TypeDepense @model
@auth(
    rules: [
        { allow: groups, groups: [ "admin" ] }
    ]
){
  id: ID! @primaryKey
  name: String!
  description: String
  depenses: [Depense] @hasMany(indexName: "byTypeDepense", fields: ["id"])
}

type Depense @model
@auth(
    rules: [
        { allow: groups, groups: [ "admin" ] }
    ]
){
 id: ID! @primaryKey
  vehicleImmat: String! @index(name: "byVehicle")
  vehicle: Vehicle! @belongsTo(fields: ["vehicleImmat"])
  typeDepenseId: ID! @index(name: "byTypeDepense")
  typeDepense: TypeDepense! @belongsTo(fields: ["typeDepenseId"])
  prestataire: String
  montantTTC: Float!
  montantHT: Float
  associateDate: AWSDateTime
  produit: String
  ville: String
  qte: Int
  description: String
  companyDepensesId: ID! @index(name: "depensesByCompany")
  company: Company! @belongsTo(fields: ["companyDepensesId"])
}

type Query {
  getTrajectoryHistory(driverSub:String, vehicleImmat: String, tagId: String, from: String!, to:String!, page: Int!, mode: ReportCallMode!): TrajectoryHistory @function(name: "FleetWatcherReportProcessor-${env}")
  getDailySummary(driverSub:String, vehicleImmat: String, tagId: String, from: String!, to:String!, page: Int!, mode: ReportCallMode!): DailySummary @function(name: "FleetWatcherReportProcessor-${env}")
  getActivityReport(driverSub:String, vehicleImmat: String, tagId: String, from: String!, to:String!, page: Int!, mode: ReportCallMode!): ActivityReport @function(name: "FleetWatcherReportProcessor-${env}")
  getFuelReport(driverSub:String, vehicleImmat: String, tagId: String, from: String!, to:String!, page: Int!, mode: ReportCallMode!): FuelReport @function(name: "FleetWatcherReportProcessor-${env}")
  getProximitySearch(address: String!, companyId: ID!): [Trame] @function(name: "FleetWatcherproximitySearch-${env}")
}

type Mutation {
  executeCustomAction(operation:CustomActionOperation!, request: AWSJSON!): CustomActionResponse @function(name: "FleetWatcherCustomActions-${env}")
  executeMaintenanceAction( action: MaintenanceAction! maintenanceId: ID! input: AWSJSON ): MaintenanceResponse @function(name: "FleetWatcherMaintenanceProcessor-${env}")
  updateUserPassword( userPoolId: String! username: String! newPassword: String! ): UpdatePasswordResponse @function(name: "FleetWatcherUpdateUserPassword-${env}")
}

type LabelsCollection @model
@auth(
  rules: [
    { allow: private}
  ]
){
  key: String! @primaryKey
  label: String!
  type: String!
}

type Tag @model
@auth(
  rules: [
    { allow: groups, groups: [ "admin" ] }
  ]
){
  id: ID!
  name: String!
  description: String!
  color: String
  company: Company! @hasOne
  vehicles: [Vehicle] @manyToMany(relationName: "VehicleTags")
}

enum MaintenanceAction {
  schedule_maintenance
  cancel_maintenance
  complete_maintenance
  update_maintenance  
}

type UpdatePasswordResponse {
  message: String
  error: String
}

type MaintenanceResponse {
  status: String!
  message: String!
}

type ActivityReport {
  pagesCount: Int
  currentPageNumber: Int
  currentPageItemsCount: Int
  fullItemsCount: Int
  items: [ActivityReportRecord]
}

type ActivityReportRecord {
  begin: AWSDateTime
  end: AWSDateTime
  route: String
  duration: Float
  totalMileage: Float
  maxSpeed: Float
  canMileageStart: Float
  canMileageEnd: Float
  totalCanMileage: Float
  totalFuelConsumed: Float
  vehicleImmat: String
  vehicleBrand: String
  driverSub: String
  driverFirstname: String
  driverLastname: String
}

type DailySummary {
  pagesCount: Int
  currentPageNumber: Int
  currentPageItemsCount: Int
  fullItemsCount: Int
  items: [DailySummaryRecord]
}

type DailySummaryRecord {
  begin: AWSDateTime
  end: AWSDateTime
  route: String
  duration: Float
  distance: Float
  totalMileage: Float
  vehicleImmat: String
  vehicleBrand: String
  driverSub: String
  driverFirstname: String
  driverLastname: String
}

type FuelReport {
  pagesCount: Int
  currentPageNumber: Int
  currentPageItemsCount: Int
  fullItemsCount: Int
  items: [FuelReportRecord]
}

type FuelReportRecord {
  begin: AWSDateTime
  end: AWSDateTime
  duration: Float
  fuelBefore: String
  fuelAfter: String
  fuelDelta: String
  distance: Float
  lat: Float
  lng: Float
  vehicleImmat: String
  vehicleBrand: String
  driverSub: String
  driverFirstname: String
  driverLastname: String
  driverFullName: String
}

type TrajectoryHistory {
  pagesCount: Int
  currentPageNumber: Int
  currentPageItemsCount: Int
  fullItemsCount: Int
  items: [TrajectoryHistoryRecord]
}

type TrajectoryHistoryRecord {
  deviceId: String
  imei: String
  avgSpeed: Float
  begin: AWSDateTime
  end: AWSDateTime
  groupingDate: String
  addressStart: String
  addressEnd: String
  distance: Float
  eco: String
  acceleration: String
  braking: String
  totalDistance: Float
  tempsArret: Float
  duration: Float
  idleTime: Float
  maxSpeed: Float
  vehicleImmat: String
  vehicleBrand: String
  driverSub: String
  driverFirstname: String
  driverLastname: String
  points: [Point]
}

type Point {
  gisgraphyAddressFormatedPostal: String
  positionAltitude: Float
  positionLatitude: Float
  positionLongitude: Float
  positionSatellites: Int
  positionSpeed: Float
  timestamp: AWSDateTime
}

enum AlertFrequency {
  daily
  weekly
  monthly
}

enum AlertType {
  add_fuel
  device_disconnected
  maintenance_required
  zone_boundary
  timefencing
  start_driving
  mileage_exceeded
  speed_limit_exceeded
  unrecognized_driver
  battery_warning
  collision_detection
}

enum ReportCallMode {
  trajectory_history
  daily_summary
  activity_report
  fuel_report
}

enum Processor {
  teltonika
  ruptela
  xirgo
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type CustomActionResponse {
  status: String!
  message: String!
}

enum MaintenanceOperationType {
  CHANGEMENT_HUILE
  INSPECTION_FREINS
  ROTATION_PNEUS
  VERIFICATION_FLUIDES
  REMPLACEMENT_BATTERIE
  REGLAGE_MOTEUR
  REMPLACEMENT_FILTRE_AIR
  FLUSH_LIQUIDE_REFROIDISSEMENT
  ALIGNEMENT_ROUES
  REMPLACEMENT_BOUGIES
  CHANGEMENT_LIQUIDE_TRANSMISSION
  REMPLACEMENT_LIQUIDE_FREIN
  REMPLACEMENT_LIQUIDE_DIRECTION
  REMPLACEMENT_FILTRE_CARBURANT
  INSPECTION_RADIATEUR
  REMPLACEMENT_COURROIE_DISTRIBUTION
  INSPECTION_SUSPENSION
  VERIFICATION_SYSTEME_ECHAPPEMENT
  REMPLACEMENT_FILTRE_HABITACLE
  NETTOYAGE_CORPS_PAPILLON
  REMPLACEMENT_COURROIE_ENTRAINEMENT
  REGLAGE_SOUPAPES
  INSPECTION_ROULEMENTS_ROUE
  REMPLACEMENT_VALVE_PCV
  INSPECTION_CONVERTISSEUR_CATALYTIQUE
  VERIFICATION_SYSTEME_EMISSION
  INSPECTION_SYSTEME_ALLUMAGE
  INSPECTION_SYSTEME_DIRECTION
  SERVICE_ETRIER_FREIN
  INSPECTION_MOYEU_ROUE
}

enum MaintenanceStatus {
  PROGRAMMED
  OPENED
  CLOSED
}

enum CustomActionOperation {
  link_conductor_vehicle
  link_vehicle_alert
  unlink_vehicle_alert
  delete_alert
  setup_start_driving_Alert
}

enum UserRole {
    ADMIN
    MANAGER
    INVITED
    LIMITED_INVITED
}

enum AccessType {
    FULL_COMPANY
    VEHICLE_LIST
}
