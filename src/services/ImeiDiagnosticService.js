import { getLazyClient } from '@/config/aws-config.js';
import * as queries from '../graphql/queries';

const client = getLazyClient();

/**
 * Service de diagnostic avanc√© pour les recherches IMEI
 */
export class ImeiDiagnosticService {
  
  /**
   * Test diagnostic complet pour un IMEI sp√©cifique
   */
  static async runFullDiagnostic(imei) {
    console.log(`üîç === DIAGNOSTIC COMPLET POUR IMEI ${imei} ===`);
    const results = {
      imei,
      timestamp: new Date().toISOString(),
      tests: []
    };
    
    try {
      // Test 1: Recherche directe par getDevice
      console.log('üîç Test 1: getDevice direct');
      try {
        const deviceResponse = await client.graphql({
          query: queries.getDevice,
          variables: { imei }
        });
        
        const test1 = {
          name: 'getDevice_direct',
          success: !!deviceResponse.data.getDevice,
          data: deviceResponse.data.getDevice,
          error: null
        };
        results.tests.push(test1);
        console.log('‚úÖ getDevice result:', deviceResponse.data.getDevice);
      } catch (error) {
        results.tests.push({
          name: 'getDevice_direct',
          success: false,
          data: null,
          error: error.message
        });
        console.log('‚ùå getDevice error:', error.message);
      }

      // Test 2: listDevices avec filtre IMEI exact
      console.log('üîç Test 2: listDevices avec filtre IMEI exact');
      try {
        const listResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            filter: {
              imei: { eq: imei }
            },
            limit: 10
          }
        });
        
        const test2 = {
          name: 'listDevices_filter_exact',
          success: listResponse.data.listDevices.items.length > 0,
          data: listResponse.data.listDevices.items,
          count: listResponse.data.listDevices.items.length,
          error: null
        };
        results.tests.push(test2);
        console.log('‚úÖ listDevices filter result:', listResponse.data.listDevices.items);
      } catch (error) {
        results.tests.push({
          name: 'listDevices_filter_exact',
          success: false,
          data: null,
          error: error.message
        });
        console.log('‚ùå listDevices filter error:', error.message);
      }

      // Test 3: listDevices avec param√®tre imei direct (nouvelle structure)
      console.log('üîç Test 3: listDevices avec param√®tre imei direct');
      try {
        const listImeiResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            imei: imei,
            limit: 10
          }
        });
        
        const test3 = {
          name: 'listDevices_param_imei',
          success: listImeiResponse.data.listDevices.items.length > 0,
          data: listImeiResponse.data.listDevices.items,
          count: listImeiResponse.data.listDevices.items.length,
          error: null
        };
        results.tests.push(test3);
        console.log('‚úÖ listDevices param imei result:', listImeiResponse.data.listDevices.items);
      } catch (error) {
        results.tests.push({
          name: 'listDevices_param_imei',
          success: false,
          data: null,
          error: error.message
        });
        console.log('‚ùå listDevices param imei error:', error.message);
      }

      // Test 4: Recherche "brute force" - liste tous les devices et filtre c√¥t√© client
      console.log('üîç Test 4: Recherche brute force (tous les devices)');
      try {
        const allDevicesResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            limit: 1000
          }
        });
        
        const allDevices = allDevicesResponse.data.listDevices.items;
        const foundDevice = allDevices.find(device => device.imei === imei);
        
        const test4 = {
          name: 'brute_force_search',
          success: !!foundDevice,
          data: foundDevice,
          totalDevicesScanned: allDevices.length,
          error: null
        };
        results.tests.push(test4);
        console.log('‚úÖ Brute force result:', foundDevice);
        console.log(`üìä Total devices scanned: ${allDevices.length}`);
      } catch (error) {
        results.tests.push({
          name: 'brute_force_search',
          success: false,
          data: null,
          error: error.message
        });
        console.log('‚ùå Brute force error:', error.message);
      }

      // Test 5: V√©rifier le cache local
      console.log('üîç Test 5: V√©rification du cache local');
      try {
        const cacheKey = 'companyVehicleDeviceData';
        const cachedData = JSON.parse(localStorage.getItem(cacheKey) || '{}');
        
        let foundInCache = null;
        if (cachedData.vehicles && Array.isArray(cachedData.vehicles)) {
          foundInCache = cachedData.vehicles.find(item => 
            item.imei === imei || 
            (item.type === 'device' && item.imei === imei)
          );
        }
        
        const test5 = {
          name: 'local_cache_check',
          success: !!foundInCache,
          data: foundInCache,
          cacheSize: cachedData.vehicles ? cachedData.vehicles.length : 0,
          cacheAge: cachedData.timestamp ? Date.now() - cachedData.timestamp : null,
          error: null
        };
        results.tests.push(test5);
        console.log('‚úÖ Cache check result:', foundInCache);
      } catch (error) {
        results.tests.push({
          name: 'local_cache_check',
          success: false,
          data: null,
          error: error.message
        });
        console.log('‚ùå Cache check error:', error.message);
      }

      // R√©sum√© du diagnostic
      const successfulTests = results.tests.filter(test => test.success);
      console.log(`üîç === R√âSUM√â DIAGNOSTIC ${imei} ===`);
      console.log(`‚úÖ Tests r√©ussis: ${successfulTests.length}/${results.tests.length}`);
      console.log(`‚ùå Tests √©chou√©s: ${results.tests.length - successfulTests.length}/${results.tests.length}`);
      
      if (successfulTests.length > 0) {
        console.log('üéØ IMEI trouv√© dans:', successfulTests.map(test => test.name).join(', '));
        console.log('üìã Donn√©es trouv√©es:', successfulTests[0].data);
      } else {
        console.log('‚ùå IMEI INTROUVABLE dans tous les tests');
      }

      return results;
      
    } catch (error) {
      console.error('üîç Erreur lors du diagnostic:', error);
      throw error;
    }
  }

  /**
   * Force la synchronisation compl√®te pour un IMEI
   */
  static async forceSyncImei(imei) {
    console.log(`üîÑ === SYNCHRONISATION FORC√âE POUR IMEI ${imei} ===`);
    
    try {
      // Vider le cache local
      const cacheKey = 'companyVehicleDeviceData';
      localStorage.removeItem(cacheKey);
      console.log('üóëÔ∏è Cache local vid√©');

      // Vider le cache global si pr√©sent
      if (window.allDataCache) {
        window.allDataCache = null;
        console.log('üóëÔ∏è Cache global vid√©');
      }

      // Attendre un peu pour la propagation
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Refaire le diagnostic
      const diagnosticResults = await this.runFullDiagnostic(imei);
      
      console.log('üîÑ Synchronisation forc√©e termin√©e');
      return diagnosticResults;
      
    } catch (error) {
      console.error('üîÑ Erreur lors de la synchronisation forc√©e:', error);
      throw error;
    }
  }

  /**
   * Recherche am√©lior√©e avec tous les fallbacks
   */
  static async enhancedImeiSearch(imei) {
    console.log(`üîç === RECHERCHE AM√âLIOR√âE POUR IMEI ${imei} ===`);
    
    try {
      // Strat√©gie 1: getDevice direct
      try {
        const deviceResponse = await client.graphql({
          query: queries.getDevice,
          variables: { imei }
        });
        
        if (deviceResponse.data.getDevice) {
          console.log('‚úÖ Trouv√© via getDevice');
          return deviceResponse.data.getDevice;
        }
      } catch (error) {
        console.log('‚ùå getDevice √©chou√©:', error.message);
      }

      // Strat√©gie 2: listDevices avec param√®tre imei
      try {
        const listResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            imei: imei,
            limit: 20
          }
        });
        
        if (listResponse.data.listDevices.items.length > 0) {
          console.log('‚úÖ Trouv√© via listDevices (param imei)');
          return listResponse.data.listDevices.items[0];
        }
      } catch (error) {
        console.log('‚ùå listDevices (param) √©chou√©:', error.message);
      }

      // Strat√©gie 3: listDevices avec filtre
      try {
        const filterResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            filter: { imei: { eq: imei } },
            limit: 20
          }
        });
        
        if (filterResponse.data.listDevices.items.length > 0) {
          console.log('‚úÖ Trouv√© via listDevices (filter)');
          return filterResponse.data.listDevices.items[0];
        }
      } catch (error) {
        console.log('‚ùå listDevices (filter) √©chou√©:', error.message);
      }

      // Strat√©gie 4: Recherche brute force
      try {
        console.log('üîç Tentative de recherche brute force...');
        const allResponse = await client.graphql({
          query: queries.listDevices,
          variables: {
            limit: 2000
          }
        });
        
        const foundDevice = allResponse.data.listDevices.items.find(device => device.imei === imei);
        if (foundDevice) {
          console.log('‚úÖ Trouv√© via recherche brute force');
          return foundDevice;
        }
      } catch (error) {
        console.log('‚ùå Recherche brute force √©chou√©e:', error.message);
      }

      console.log('‚ùå IMEI introuvable avec toutes les strat√©gies');
      return null;
      
    } catch (error) {
      console.error('üîç Erreur lors de la recherche am√©lior√©e:', error);
      throw error;
    }
  }
}